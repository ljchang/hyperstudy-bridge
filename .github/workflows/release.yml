name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: HyperStudy Bridge ${{ github.ref_name }}
          draft: true
          prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: .AppImage
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: .dmg
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: .dmg
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: .msi
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Tauri dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      
      - name: Import Apple certificates (macOS)
        if: matrix.os == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          echo "Setting up code signing certificates..."
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p actions temp.keychain
          security set-keychain-settings -lut 21600 temp.keychain
          security unlock-keychain -p actions temp.keychain
          security import certificate.p12 -k temp.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions temp.keychain
          security list-keychains -d user -s temp.keychain
          rm certificate.p12
      
      - name: Build Tauri app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: npm run tauri:build -- --target ${{ matrix.target }}
      
      - name: Find built artifacts
        id: find-artifacts
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            BUNDLE_PATH=$(find src-tauri/target -name "*.msi" -type f | head -1)
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            BUNDLE_PATH=$(find src-tauri/target -name "*.dmg" -type f | head -1)
          else
            BUNDLE_PATH=$(find src-tauri/target -name "*.AppImage" -type f | head -1)
          fi
          echo "bundle_path=$BUNDLE_PATH" >> $GITHUB_OUTPUT
          echo "bundle_name=$(basename $BUNDLE_PATH)" >> $GITHUB_OUTPUT
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: ${{ steps.find-artifacts.outputs.bundle_path }}
          asset_name: hyperstudy-bridge-${{ matrix.target }}${{ matrix.ext }}
          asset_content_type: application/octet-stream
      
      - name: Cleanup macOS keychain
        if: matrix.os == 'macos-latest'
        run: |
          security delete-keychain temp.keychain || true

  publish-release:
    name: Publish Release
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false
            })