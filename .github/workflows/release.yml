name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      tag_name: ${{ steps.get-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get tag name
        id: get-tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: release-notes
        run: |
          # Generate changelog from git log
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD)
          fi

          # Create release notes
          cat > release_notes.md << EOF
          ## What's Changed

          $CHANGELOG

          ## Installation

          Download the appropriate binary for your platform:
          - **macOS**: Download the \`.dmg\` file for your architecture (Intel or Apple Silicon)
          - **Windows**: Download the \`.msi\` installer
          - **Linux**: Download the \`.AppImage\` file

          ## Verification

          All binaries are signed and can be verified:
          - macOS: Signed with Apple Developer ID and notarized
          - Windows: Signed with code signing certificate

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ steps.get-tag.outputs.tag }}
          EOF

      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get-tag.outputs.tag }}
          name: HyperStudy Bridge ${{ steps.get-tag.outputs.tag }}
          body_path: release_notes.md
          draft: ${{ github.event.inputs.draft || 'false' }}
          prerelease: ${{ contains(steps.get-tag.outputs.tag, 'beta') || contains(steps.get-tag.outputs.tag, 'alpha') || contains(steps.get-tag.outputs.tag, 'rc') }}
          generate_release_notes: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: .AppImage
            mime: application/x-executable
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: .dmg
            mime: application/x-apple-diskimage
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: .dmg
            mime: application/x-apple-diskimage
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: .msi
            mime: application/x-msi
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-targets: false
          key: release-${{ matrix.target }}

      - name: Install dependencies
        run: npm ci

      - name: Install Tauri dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libssl-dev \
            pkg-config

      - name: Import Apple certificates (macOS)
        if: matrix.os == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD || 'actions' }}
        run: |
          echo "Setting up code signing certificates..."
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          # Import certificate
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security list-keychains -d user -s build.keychain

          # Clean up
          rm certificate.p12

      - name: Build Tauri app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: npm run tauri:build -- --target ${{ matrix.target }}

      - name: Find and prepare artifacts
        id: artifacts
        shell: bash
        run: |
          # Find the built artifacts
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            BUNDLE_PATH=$(find src-tauri/target -name "*.msi" -type f | head -1)
            UPDATER_PATH=$(find src-tauri/target -name "*.msi.zip" -type f | head -1)
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            BUNDLE_PATH=$(find src-tauri/target -name "*.dmg" -type f | head -1)
            UPDATER_PATH=$(find src-tauri/target -name "*.app.tar.gz" -type f | head -1)
          else
            BUNDLE_PATH=$(find src-tauri/target -name "*.AppImage" -type f | head -1)
            UPDATER_PATH=$(find src-tauri/target -name "*.AppImage.tar.gz" -type f | head -1)
          fi

          echo "bundle_path=$BUNDLE_PATH" >> $GITHUB_OUTPUT
          echo "bundle_name=$(basename $BUNDLE_PATH)" >> $GITHUB_OUTPUT

          if [ -n "$UPDATER_PATH" ] && [ -f "$UPDATER_PATH" ]; then
            echo "updater_path=$UPDATER_PATH" >> $GITHUB_OUTPUT
            echo "updater_name=$(basename $UPDATER_PATH)" >> $GITHUB_OUTPUT
          fi

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.tag_name }}
          files: |
            ${{ steps.artifacts.outputs.bundle_path }}
            ${{ steps.artifacts.outputs.updater_path }}

      - name: Upload artifacts for updater manifest
        uses: actions/upload-artifact@v4
        with:
          name: updater-${{ matrix.target }}
          path: |
            ${{ steps.artifacts.outputs.updater_path }}
            src-tauri/target/${{ matrix.target }}/release/bundle/*/latest.json
          retention-days: 7

      - name: Cleanup macOS keychain
        if: matrix.os == 'macos-latest'
        run: |
          security delete-keychain build.keychain || true

  create-updater-manifest:
    name: Create Updater Manifest
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Download updater artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: updater-*
          merge-multiple: true
          path: ./updater-files

      - name: Generate updater manifest
        run: |
          # Create updater manifest
          cat > updater.json << EOF
          {
            "version": "${{ needs.create-release.outputs.tag_name }}",
            "notes": "Download the latest version of HyperStudy Bridge",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {}
          }
          EOF

          # Process each platform
          for json_file in ./updater-files/latest.json; do
            if [ -f "$json_file" ]; then
              # Merge platform data into main manifest
              jq -s '.[0] * .[1]' updater.json "$json_file" > temp.json
              mv temp.json updater.json
            fi
          done

      - name: Upload updater manifest
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.tag_name }}
          files: updater.json

  post-release:
    name: Post Release Tasks
    needs: [create-release, build-and-upload, create-updater-manifest]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - uses: actions/checkout@v5

      - name: Update release notes with download stats
        uses: actions/github-script@v8
        with:
          script: |
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ needs.create-release.outputs.tag_name }}'
            });

            // Add download instructions to release notes
            const downloadInstructions = `

            ## Download Instructions

            Choose the appropriate installer for your platform:

            | Platform | Architecture | Download |
            |----------|-------------|----------|
            | macOS | Intel (x64) | [Download DMG](${release.assets.find(a => a.name.includes('x86_64-apple-darwin'))?.browser_download_url || '#'}) |
            | macOS | Apple Silicon (ARM64) | [Download DMG](${release.assets.find(a => a.name.includes('aarch64-apple-darwin'))?.browser_download_url || '#'}) |
            | Windows | x64 | [Download MSI](${release.assets.find(a => a.name.includes('x86_64-pc-windows-msvc'))?.browser_download_url || '#'}) |
            | Linux | x64 | [Download AppImage](${release.assets.find(a => a.name.includes('x86_64-unknown-linux-gnu'))?.browser_download_url || '#'}) |
            `;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: release.body + downloadInstructions
            });